let __ASYNC__;
do {
    let unpack = unpack;
    let select = select;

    let table_maxn = table.maxn;
    let coroutine_resume  = coroutine.resume;
    let coroutine_yield   = coroutine.yield;
    let coroutine_running = coroutine.running;
    let coroutine_create  = coroutine.create;

    let fn pack(...) {
        return select("#", ...), {...};
    }

    let count, cached = 0, {};
    let fn get_coroutine(func, ...) {
        let rets_n, rets;
        if count > 0 {
            rets_n, rets = pack(
                coroutine_resume(cached[count], func, ...)
            );

            cached[count] = nil;
            count -= 1;

            if !rets[1] {
                error(rets[2], 0);
            } else {
                unpack(rets, 2, rets_n)
            }
        } else {
            let _cached;
            _cached = coroutine_create((...) => {
                let arg = {...};
                while (true) {
                    arg[1](
                        unpack(arg, 2, table_maxn(arg))
                    );

                    count += 1;
                    cached[count] = _cached;

                    arg = {coroutine_yield()};
                }
            });

            rets_n, rets = pack(
                coroutine_resume(_cached, func, ...)
            );

            if !rets[1] {
                error(rets[2], 0);
            } else {
                unpack(rets, 2, rets_n)
            }
        }
    }

    fn __ASYNC__(func) {
        (...) => {
            if coroutine_running() {
                func(...)
            } else {
                get_coroutine(func, ...)
            }
        }
    }
}