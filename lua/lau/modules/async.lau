do {
    use select,
        unpack,
        coroutine.{resume, running, create};

    let fn pack(...) {
        return select("#", ...), {...};
    }

    /*
        aff will fix it later
    */
    // let table_maxn = table.maxn;
    // let coroutine_yield   = coroutine.yield;
    // let count, cached = 0, {};
    // let fn get_coroutine(func, ...) {
    //     let status, rets_n, rets;
    //     if count > 0 {
    //         status, rets_n, rets = coroutine_resume(cached[count], func, ...);

    //         cached[count] = nil;
    //         count -= 1;

    //         if status == false {
    //             error(rets_n, 0);
    //         } else {
    //             unpack(rets, 1, rets_n)
    //         }
    //     } else {
    //         let _cached;
    //         _cached = coroutine_create(... => {
    //             let arg = {...};
    //             while 1 {
    //                 rets_n, rets = pack(
    //                     arg[1](
    //                         unpack(arg, 2, table_maxn(arg))
    //                     )
    //                 );

    //                 count += 1;
    //                 cached[count] = _cached;

    //                 arg = {coroutine_yield(rets_n, rets)};
    //             }
    //         });

    //         status = coroutine_resume(_cached, func, ...);

    //         if !status {
    //             error(rets_n, 0);
    //         } else {
    //             // unpack(rets, 1, rets_n)
    //         }
    //     }
    // }

    fn Lau.__ASYNC__(func) {
        ... => {
            if running() {
                return func(...);
            } else {
                let rets_n, rets = pack(
                    resume(
                        create(func),
                        ...
                    )
                );

                if !rets[1] {
                    let err_msg = rets[2];
                    if !err_msg:match("^.-:%d+: ") {
                        error(err_msg:gsub("^.-:%d+: ", ""), 2);
                    } else {
                        error(err_msg, 0);
                    }
                } else {
                    return unpack(rets, 2, rets_n);
                }
            }
        }
    }
}