let AWAIT_FAILED = {
    __tostring() {
        return "await failed";
    }
};
AWAIT_FAILED.__index = AWAIT_FAILED;

function LAU_AWAIT(promise) {
    if (!Promise.isPromise(promise))
        promise = Promise.resolve(promise);
    let co = coroutine.running();
    if (!co)
        error("can't await in non async function", 2);
    promise:done((...) => {
        let status, err = coroutine.resume(co, ...);
        if (status == false)
            MsgC(Color(137, 222, 255), "[ERROR] ", err, "\n");
    }, err => {
        let NEW_AWAIT_FAILED = setmetatable({err: err}, AWAIT_FAILED);
        let status, err = coroutine.resume(co, NEW_AWAIT_FAILED, err);
        if (status == false)
            MsgC(Color(137, 222, 255), "[ERROR] ", err, "\n");
    });
    return coroutine.yield(promise);
}

function AwaitFailed(obj) {
    return getmetatable(obj) == AWAIT_FAILED;
}