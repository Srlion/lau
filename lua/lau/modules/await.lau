do {
    let getmetatable = getmetatable;

    let coroutine_running = coroutine.running;
    let coroutine_resume  = coroutine.resume;
    let coroutine_yield   = coroutine.yield;

    let fn error(err) {
        MsgC(Color(137, 222, 255), "[ERROR] ", err, "\n");
    }

    fn Lau.__AWAIT__(promise) {
        if !Promise.isPromise(promise) {
            promise = Promise.resolve(promise);
        }

        let co = coroutine_running();

        promise:done(... => {
            let status, err = coroutine_resume(co, true, ...);
            if status == false {
                error(err);
            }
        }, err => {
            let status, err = coroutine_resume(co, false, err);
            if status == false {
                error(err);
            }
        });

        coroutine_yield(promise)
    }
}